language: C

sudo:
  - required

os:
  - linux

dist:
#  - trusty
#  - xenial
 - bionic

compiler:
  - arm-linux-gnueabi-gcc-4.7
  - arm-linaro-gnueabi-gcc-4.9
  - arm-linaro-gnueabihf-gcc-4.9  
  - arm-linux-gnueabi-gcc-5
  - arm-linux-gnueabi-gcc-6
  - arm-linux-gnueabi-gcc-7
 # - arm-linux-gnueabi-gcc-8 

env:
  global:
    # COVERITY_SCAN_TOKEN
    # ** specific to your project **
    secure: "Yon+njOiEfbDoN+lw1t77Kh3ekWb/zMq947Mxm7Ty0D7UviMv5AqHNXBatzas2Ew9OMnd5II9tGR00sl99suh/t9pGoUvsaYK5eIUwVQ2q03Ad0I/CaIUGA4ZmRdujhYeQrzl5UHvrRMGphY4YIufioR/A3oHk2/fdjaLGuRUTZo8LuTu5cW7FEGhCm2DGqD/x3690p92eN0hjDb7CIojKTdZuzPMbyxmTVCQjh8Glbp2ghppRlJseG/m7epkVI9wNOJpdXditVMEF+9HExco4ML6CLmxcPlNNBDCFo6Gt4tP4d3T6642D9wLkw4sBMP0HqcKQJ+9WAvVdarbcFCzD7u3Qz63RKG+OgLtCHV0LhtzxsN4pw3JB+8YMrNgaNFQnGEulR3ukUhbTeqMrnPQEe8aroHdnc5xenxFvQ5bxJOBRaJkGZ/1sW1Mop+mqVkYbxi9hI+TioXGZZolnpGFJ+DiU1m+ul84i0W18B+TLy8gpHQTGRIGAvfL6Sn6fZpxdmbxz+z1sG/114LcrUsN6nBwkk9xVPjc6bRxcdDqULlpxU62qmVBrUZ7JIWOuMsela56cqzj9p6ilDA7ue69MNYSo98nOON77KTM6QiILyaAqbho5bS4gkCQuo++DcxFBzSiW2wzr/KWhjXgruNLz4SPZTibQCHKLjOvgifYvo="
  jobs:
    - CPS_BUILD_TEST=ALL
      CPS_SDK_PRODUCT_TYPE=CPS-MCS341-DSX
    - CPS_SDK_PRODUCT_TYPE=CPS-MC341-ADSCX
    - CPS_SDK_PRODUCT_TYPE=CPS-MCS341-DSX
    - CPS_SDK_PRODUCT_TYPE=CPS-MCS341G-DSX
    - CPS_SDK_PRODUCT_TYPE=CPS-MCS341Q-DSX
    #- CPS_SDK_PRODUCT_TYPE=CPS-MCS341G5-DSX

# addons:
  # coverity_scan:
    # GitHub project metadata
    # ** specific to your project **
    # project:
      # name: "CONPROSYS/LINUX-SDK_driver"
      # version: "1.6.0.0"
      # description: "driver"

    # Where email notification of build analysis results will be sent
    # notification_email: okamoto@contec.jp

    # Commands to prepare for build_command
    # ** likely specific to your build **
    # build_command_prepend: "cov-configure --compiler arm-linux-gnueabi-gcc-4.7 --comptype gcc --template;cov-configure --comptype gcc --compiler arm-linux-gnueabi-gcc-4.8 --template"
    # build_command_prepend: "cov-configure --compiler arm-linux-gnueabi-gcc --comptype gcc --template"

    # The command that will be added as an argument to "cov-build" to compile your project for analysis,
    # ** likely specific to your build **
    # build_command: "make"

    # Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'.
    # Take care in resource usage, and consider the build frequency allowances per
    #   https://scan.coverity.com/faq#frequency
    # branch_pattern: Next_[0-9].[0-9].[0-9].[0-9]|master

before_install:
  #compiler settings
  - CROSS_PREFIX=`echo "$TRAVIS_COMPILER" | awk -F'[-]' '{print $3 }' `
  - LINARO_OR_LINUX=`echo "$TRAVIS_COMPILER" | awk -F'[-]' '{print $2 }' `
  - CROSS_GCC_VERSION=`echo "$TRAVIS_COMPILER" | awk -F'[-]' '{print $5 }' `  
  - if [[ $LINARO_OR_LINUX = "linux" ]];then GCC_COMP=`echo "$TRAVIS_COMPILER" | awk -F'[-]' '{print $4"-"$5"-"$1"-"$2"-"$3 }' `; fi
  - if [[ $TRAVIS_COMPILER = "arm-linaro-${CROSS_PREFIX}-gcc-4.9" ]];then if [[ "$TRAVIS_CPU_ARCH" == "amd64" ]];then LINARO_GCC_COMP="gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-${CROSS_PREFIX}"; LINARO_WGET="latest-4/arm-linux-${CROSS_PREFIX}"; fi; fi
  - echo  "$GCC_COMP"
  # if you uses the old cross gcc-linux compiler, you need to add apt source old repositories. (no bionic source.list)
  - echo "deb http://archive.ubuntu.com/ubuntu/ xenial main restricted" >> "/etc/apt/sources.list"
  - echo "deb http://archive.ubuntu.com/ubuntu/ xenial universe restricted" >> "/etc/apt/sources.list"

# libc6-dev settings
  - if [[ "$CROSS_PREFIX" = "gnueabi" ]];then LIBC_DEV="libc6-dev-armel-cross";fi
  - if [[ "$CROSS_PREFIX" = "gnueabihf" ]];then LIBC_DEV="libc6-dev-armhf-cross";fi  

  # apt-get install
  - sudo apt-get update
  - travis_retry sudo apt-get install -y $GCC_COMP $LIBC_DEV libncurses5-dev binutils-arm-linux-${CROSS_PREFIX} ssl-cert ca-certificates

  # if you uses gcc-linaro, you download the binary compiler. 
  - if [[ "$LINARO_OR_LINUX" = "linaro" ]];then wget -c "https://releases.linaro.org/components/toolchain/binaries/${LINARO_WGET}/${LINARO_GCC_COMP}.tar.xz"; tar xfJ ${LINARO_GCC_COMP}.tar.xz ; cd ./${LINARO_GCC_COMP}; sudo cp -fR * /usr; cd ../; sudo rm -fR  ./${LINARO_GCC_COMP}; fi;
  - export CROSS_COMPILE=arm-linux-${CROSS_PREFIX}-
  - export ARCH=arm
  # if you uses the gcc-linux compiler, you create the soft link.
  - if [[ "$LINARO_OR_LINUX" == "linux" ]];then sudo ln -s /usr/bin/$TRAVIS_COMPILER /usr/bin/arm-linux-${CROSS_PREFIX}-gcc; fi

  # Download the kernel
  - travis_retry git clone --depth 1 --branch release https://github.com/CONPROSYS/linux-kernel_3.2.0.CONPROSYS.git $PWD/build
  - export CPS_KERNEL_DIR=$PWD/build

  # Download the library master branch
  - cd $TRAVIS_BUILD_DIR/../
  - travis_retry git clone --depth 1 --branch master https://github.com/CONPROSYS/LINUX-SDK_library.git
  - cd $TRAVIS_BUILD_DIR
  
  # export conprosys-sdk
  - export CPS_SDK_ROOTDIR="$TRAVIS_BUILD_DIR/../"
  - export CPS_SDK_LAN_TYPE="novlan"
  - export CPS_SDK_TARGET_NAME="${CPS_SDK_PRODUCT_TYPE}.${CPS_SDK_LAN_TYPE}"
  - export CPS_SDK_INSTALL_FULL_DIR="${CPS_SDK_ROOT_DIR}/target/${CPS_SDK_TARGET_NAME}"

  # install to use coverity scan
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

  # set to compile job cpu number.
  - export CPU_COUNT=`cat /proc/cpuinfo | grep -c processor`
  - export JOB_NUMBER=`expr $CPU_COUNT + 1`

  # coverity scan values (do not use addons)
  - export COVERITY_SCAN_PROJECT_NAME="CONPROSYS/LINUX-SDK_driver"
  - export COVERITY_SCAN_NOTIFICATION_EMAIL="okamoto@contec.jp"
  - export COVERITY_SCAN_BUILD_COMMAND_PREPEND="cov-configure --compiler arm-linux-gnueabi-gcc --comptype gcc --template"
  - export COVERITY_SCAN_BUILD_COMMAND="make"
  - export COVERITY_SCAN_BRANCH_PATTERN="Next_[0-9].[0-9].[0-9].[0-9]|master"

before_script:
  - |
    if [ "${TRAVIS_JOB_NUMBER}" = "${TRAVIS_BUILD_NUMBER}.1" ]; then
      # call Coverity Scan manually of addons.coverity_scan for first job only
      export COVERITY_SCAN_BRANCH=1
      # echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      curl -s 'https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh' | COVERITY_SCAN_PROJECT_NAME="${COVERITY_SCAN_PROJECT_NAME}" COVERITY_SCAN_NOTIFICATION_EMAIL="${COVERITY_SCAN_NOTIFICATION_EMAIL}" COVERITY_SCAN_BUILD_COMMAND="${COVERITY_SCAN_BUILD_COMMAND}" COVERITY_SCAN_BUILD_COMMAND_PREPEND="${COVERITY_SCAN_BUILD_COMMAND_PREPEND}" COVERITY_SCAN_BRANCH_PATTERN=${COVERITY_SCAN_BRANCH_PATTERN} bash || true
    fi
  - cd ${CPS_KERNEL_DIR}
  - ls /usr/bin/arm* 
  - make distclean
  - make defconfig "${CPS_SDK_TARGET_NAME}_defconfig"
  - make prepare
  - cd ./scripts
  - make -C ${CPS_KERNEL_DIR} M=`pwd` modules
  - cd ${CPS_SDK_ROOTDIR}
  - ln -s ${TRAVIS_BUILD_DIR} driver
  - ln -s ${CPS_KERNEL_DIR} kernel
  - cd ${TRAVIS_BUILD_DIR}
 
script:
  - make clean
  - sudo make -j${JOB_NUMBER} 
  # - make release_copy
  - sudo make -j${JOB_NUMBER}  modules_install

after_script:
  - sudo ${TRAVIS_BUILD_DIR}/cps-drivers/technical-report
  # - cd $TRAVIS_BUILD_DIR/driver/release/
  # - ./driver_version_check

